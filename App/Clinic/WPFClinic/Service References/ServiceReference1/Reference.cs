//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPFClinic.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalDepartments", ReplyAction="http://tempuri.org/IService1/GetAllMedicalDepartmentsResponse")]
        WCFClinic.vwMedicalDepartments[] GetAllMedicalDepartments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalDepartments", ReplyAction="http://tempuri.org/IService1/GetAllMedicalDepartmentsResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwMedicalDepartments[]> GetAllMedicalDepartmentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMedicalDepartments", ReplyAction="http://tempuri.org/IService1/AddMedicalDepartmentsResponse")]
        WCFClinic.vwMedicalDepartments AddMedicalDepartments(WCFClinic.vwMedicalDepartments medicalDepartment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMedicalDepartments", ReplyAction="http://tempuri.org/IService1/AddMedicalDepartmentsResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwMedicalDepartments> AddMedicalDepartmentsAsync(WCFClinic.vwMedicalDepartments medicalDepartment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMedicalDepartment", ReplyAction="http://tempuri.org/IService1/DeleteMedicalDepartmentResponse")]
        void DeleteMedicalDepartment(int medicalDepartmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMedicalDepartment", ReplyAction="http://tempuri.org/IService1/DeleteMedicalDepartmentResponse")]
        System.Threading.Tasks.Task DeleteMedicalDepartmentAsync(int medicalDepartmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalDepartmentsDetail", ReplyAction="http://tempuri.org/IService1/GetMedicalDepartmentsDetailResponse")]
        WCFClinic.vwMedicalDepartments[] GetMedicalDepartmentsDetail(int medicalDepartmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalDepartmentsDetail", ReplyAction="http://tempuri.org/IService1/GetMedicalDepartmentsDetailResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwMedicalDepartments[]> GetMedicalDepartmentsDetailAsync(int medicalDepartmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isMedicalDepartmentID", ReplyAction="http://tempuri.org/IService1/isMedicalDepartmentIDResponse")]
        bool isMedicalDepartmentID(int medicalDepartmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isMedicalDepartmentID", ReplyAction="http://tempuri.org/IService1/isMedicalDepartmentIDResponse")]
        System.Threading.Tasks.Task<bool> isMedicalDepartmentIDAsync(int medicalDepartmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalStaff", ReplyAction="http://tempuri.org/IService1/GetAllMedicalStaffResponse")]
        WCFClinic.vwMedicalStaff[] GetAllMedicalStaff();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalStaff", ReplyAction="http://tempuri.org/IService1/GetAllMedicalStaffResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwMedicalStaff[]> GetAllMedicalStaffAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMedicalStaff", ReplyAction="http://tempuri.org/IService1/AddMedicalStaffResponse")]
        WCFClinic.vwMedicalStaff AddMedicalStaff(WCFClinic.vwMedicalStaff medicalStaff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddMedicalStaff", ReplyAction="http://tempuri.org/IService1/AddMedicalStaffResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwMedicalStaff> AddMedicalStaffAsync(WCFClinic.vwMedicalStaff medicalStaff);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMedicalStaff", ReplyAction="http://tempuri.org/IService1/DeleteMedicalStaffResponse")]
        void DeleteMedicalStaff(int medicalStaffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMedicalStaff", ReplyAction="http://tempuri.org/IService1/DeleteMedicalStaffResponse")]
        System.Threading.Tasks.Task DeleteMedicalStaffAsync(int medicalStaffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalStaffsDetail", ReplyAction="http://tempuri.org/IService1/GetMedicalStaffsDetailResponse")]
        WCFClinic.vwMedicalStaff[] GetMedicalStaffsDetail(int medicalStaffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalStaffsDetail", ReplyAction="http://tempuri.org/IService1/GetMedicalStaffsDetailResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwMedicalStaff[]> GetMedicalStaffsDetailAsync(int medicalStaffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isMedicalStaffID", ReplyAction="http://tempuri.org/IService1/isMedicalStaffIDResponse")]
        bool isMedicalStaffID(int medicalStaffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isMedicalStaffID", ReplyAction="http://tempuri.org/IService1/isMedicalStaffIDResponse")]
        System.Threading.Tasks.Task<bool> isMedicalStaffIDAsync(int medicalStaffID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPatients", ReplyAction="http://tempuri.org/IService1/GetAllPatientsResponse")]
        WCFClinic.vwPatients[] GetAllPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPatients", ReplyAction="http://tempuri.org/IService1/GetAllPatientsResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwPatients[]> GetAllPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPatient", ReplyAction="http://tempuri.org/IService1/AddPatientResponse")]
        WCFClinic.vwPatients AddPatient(WCFClinic.vwPatients patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPatient", ReplyAction="http://tempuri.org/IService1/AddPatientResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwPatients> AddPatientAsync(WCFClinic.vwPatients patient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePatient", ReplyAction="http://tempuri.org/IService1/DeletePatientResponse")]
        void DeletePatient(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePatient", ReplyAction="http://tempuri.org/IService1/DeletePatientResponse")]
        System.Threading.Tasks.Task DeletePatientAsync(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPatientsDetail", ReplyAction="http://tempuri.org/IService1/GetPatientsDetailResponse")]
        WCFClinic.vwPatients[] GetPatientsDetail(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPatientsDetail", ReplyAction="http://tempuri.org/IService1/GetPatientsDetailResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwPatients[]> GetPatientsDetailAsync(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isPatientID", ReplyAction="http://tempuri.org/IService1/isPatientIDResponse")]
        bool isPatientID(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isPatientID", ReplyAction="http://tempuri.org/IService1/isPatientIDResponse")]
        System.Threading.Tasks.Task<bool> isPatientIDAsync(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDoctorAppointment", ReplyAction="http://tempuri.org/IService1/GetAllDoctorAppointmentResponse")]
        WCFClinic.vwDoctorAppointment[] GetAllDoctorAppointment();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllDoctorAppointment", ReplyAction="http://tempuri.org/IService1/GetAllDoctorAppointmentResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwDoctorAppointment[]> GetAllDoctorAppointmentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddDoctorAppointment", ReplyAction="http://tempuri.org/IService1/AddDoctorAppointmentResponse")]
        WCFClinic.vwDoctorAppointment AddDoctorAppointment(WCFClinic.vwDoctorAppointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddDoctorAppointment", ReplyAction="http://tempuri.org/IService1/AddDoctorAppointmentResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwDoctorAppointment> AddDoctorAppointmentAsync(WCFClinic.vwDoctorAppointment appointment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteDoctorAppointment", ReplyAction="http://tempuri.org/IService1/DeleteDoctorAppointmentResponse")]
        void DeleteDoctorAppointment(int doctorAppointmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteDoctorAppointment", ReplyAction="http://tempuri.org/IService1/DeleteDoctorAppointmentResponse")]
        System.Threading.Tasks.Task DeleteDoctorAppointmentAsync(int doctorAppointmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDoctorAppointmentsDetail", ReplyAction="http://tempuri.org/IService1/GetDoctorAppointmentsDetailResponse")]
        WCFClinic.vwDoctorAppointment[] GetDoctorAppointmentsDetail(int doctorAppointmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDoctorAppointmentsDetail", ReplyAction="http://tempuri.org/IService1/GetDoctorAppointmentsDetailResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwDoctorAppointment[]> GetDoctorAppointmentsDetailAsync(int doctorAppointmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isDoctorAppointmentID", ReplyAction="http://tempuri.org/IService1/isDoctorAppointmentIDResponse")]
        bool isDoctorAppointmentID(int doctorAppointmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isDoctorAppointmentID", ReplyAction="http://tempuri.org/IService1/isDoctorAppointmentIDResponse")]
        System.Threading.Tasks.Task<bool> isDoctorAppointmentIDAsync(int doctorAppointmentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLogins", ReplyAction="http://tempuri.org/IService1/GetAllLoginsResponse")]
        WCFClinic.vwLogin[] GetAllLogins();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLogins", ReplyAction="http://tempuri.org/IService1/GetAllLoginsResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwLogin[]> GetAllLoginsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLogin", ReplyAction="http://tempuri.org/IService1/AddLoginResponse")]
        WCFClinic.vwLogin AddLogin(WCFClinic.vwLogin login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLogin", ReplyAction="http://tempuri.org/IService1/AddLoginResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwLogin> AddLoginAsync(WCFClinic.vwLogin login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLogin", ReplyAction="http://tempuri.org/IService1/DeleteLoginResponse")]
        void DeleteLogin(int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLogin", ReplyAction="http://tempuri.org/IService1/DeleteLoginResponse")]
        System.Threading.Tasks.Task DeleteLoginAsync(int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLoginsDetail", ReplyAction="http://tempuri.org/IService1/GetLoginsDetailResponse")]
        WCFClinic.vwLogin[] GetLoginsDetail(int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLoginsDetail", ReplyAction="http://tempuri.org/IService1/GetLoginsDetailResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwLogin[]> GetLoginsDetailAsync(int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isLoginID", ReplyAction="http://tempuri.org/IService1/isLoginIDResponse")]
        bool isLoginID(int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isLoginID", ReplyAction="http://tempuri.org/IService1/isLoginIDResponse")]
        System.Threading.Tasks.Task<bool> isLoginIDAsync(int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginUserManagement", ReplyAction="http://tempuri.org/IService1/LoginUserManagementResponse")]
        bool LoginUserManagement(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginUserManagement", ReplyAction="http://tempuri.org/IService1/LoginUserManagementResponse")]
        System.Threading.Tasks.Task<bool> LoginUserManagementAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginUserPatient", ReplyAction="http://tempuri.org/IService1/LoginUserPatientResponse")]
        bool LoginUserPatient(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginUserPatient", ReplyAction="http://tempuri.org/IService1/LoginUserPatientResponse")]
        System.Threading.Tasks.Task<bool> LoginUserPatientAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginUserMedicalStaff", ReplyAction="http://tempuri.org/IService1/LoginUserMedicalStaffResponse")]
        bool LoginUserMedicalStaff(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoginUserMedicalStaff", ReplyAction="http://tempuri.org/IService1/LoginUserMedicalStaffResponse")]
        System.Threading.Tasks.Task<bool> LoginUserMedicalStaffAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/maxPatientID", ReplyAction="http://tempuri.org/IService1/maxPatientIDResponse")]
        int maxPatientID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/maxPatientID", ReplyAction="http://tempuri.org/IService1/maxPatientIDResponse")]
        System.Threading.Tasks.Task<int> maxPatientIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/maxMedicalStaffID", ReplyAction="http://tempuri.org/IService1/maxMedicalStaffIDResponse")]
        int maxMedicalStaffID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/maxMedicalStaffID", ReplyAction="http://tempuri.org/IService1/maxMedicalStaffIDResponse")]
        System.Threading.Tasks.Task<int> maxMedicalStaffIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/currentPatientID", ReplyAction="http://tempuri.org/IService1/currentPatientIDResponse")]
        int currentPatientID(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/currentPatientID", ReplyAction="http://tempuri.org/IService1/currentPatientIDResponse")]
        System.Threading.Tasks.Task<int> currentPatientIDAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/currentMedicalStaffID", ReplyAction="http://tempuri.org/IService1/currentMedicalStaffIDResponse")]
        int currentMedicalStaffID(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/currentMedicalStaffID", ReplyAction="http://tempuri.org/IService1/currentMedicalStaffIDResponse")]
        System.Threading.Tasks.Task<int> currentMedicalStaffIDAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPharmacy", ReplyAction="http://tempuri.org/IService1/GetAllPharmacyResponse")]
        WCFClinic.vwPharmacy[] GetAllPharmacy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPharmacy", ReplyAction="http://tempuri.org/IService1/GetAllPharmacyResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwPharmacy[]> GetAllPharmacyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPharmacy", ReplyAction="http://tempuri.org/IService1/AddPharmacyResponse")]
        WCFClinic.vwPharmacy AddPharmacy(WCFClinic.vwPharmacy pharmacy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPharmacy", ReplyAction="http://tempuri.org/IService1/AddPharmacyResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwPharmacy> AddPharmacyAsync(WCFClinic.vwPharmacy pharmacy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePharmacy", ReplyAction="http://tempuri.org/IService1/DeletePharmacyResponse")]
        void DeletePharmacy(int pharmacyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePharmacy", ReplyAction="http://tempuri.org/IService1/DeletePharmacyResponse")]
        System.Threading.Tasks.Task DeletePharmacyAsync(int pharmacyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPharmacyDetail", ReplyAction="http://tempuri.org/IService1/GetPharmacyDetailResponse")]
        WCFClinic.vwPharmacy[] GetPharmacyDetail(int pharmacyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPharmacyDetail", ReplyAction="http://tempuri.org/IService1/GetPharmacyDetailResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwPharmacy[]> GetPharmacyDetailAsync(int pharmacyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isPharmacyID", ReplyAction="http://tempuri.org/IService1/isPharmacyIDResponse")]
        bool isPharmacyID(int pharmacyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isPharmacyID", ReplyAction="http://tempuri.org/IService1/isPharmacyIDResponse")]
        System.Threading.Tasks.Task<bool> isPharmacyIDAsync(int pharmacyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTakeMedication", ReplyAction="http://tempuri.org/IService1/GetAllTakeMedicationResponse")]
        WCFClinic.vwTakeMedication[] GetAllTakeMedication();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllTakeMedication", ReplyAction="http://tempuri.org/IService1/GetAllTakeMedicationResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwTakeMedication[]> GetAllTakeMedicationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTakeMedication", ReplyAction="http://tempuri.org/IService1/AddTakeMedicationResponse")]
        WCFClinic.vwTakeMedication AddTakeMedication(WCFClinic.vwTakeMedication takeMedication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddTakeMedication", ReplyAction="http://tempuri.org/IService1/AddTakeMedicationResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwTakeMedication> AddTakeMedicationAsync(WCFClinic.vwTakeMedication takeMedication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTakeMedication", ReplyAction="http://tempuri.org/IService1/DeleteTakeMedicationResponse")]
        void DeleteTakeMedication(int takeMedicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteTakeMedication", ReplyAction="http://tempuri.org/IService1/DeleteTakeMedicationResponse")]
        System.Threading.Tasks.Task DeleteTakeMedicationAsync(int takeMedicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTakeMedicationDetail", ReplyAction="http://tempuri.org/IService1/GetTakeMedicationDetailResponse")]
        WCFClinic.vwTakeMedication[] GetTakeMedicationDetail(int takeMedicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTakeMedicationDetail", ReplyAction="http://tempuri.org/IService1/GetTakeMedicationDetailResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwTakeMedication[]> GetTakeMedicationDetailAsync(int takeMedicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isTakeMedicationID", ReplyAction="http://tempuri.org/IService1/isTakeMedicationIDResponse")]
        bool isTakeMedicationID(int takeMedicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isTakeMedicationID", ReplyAction="http://tempuri.org/IService1/isTakeMedicationIDResponse")]
        System.Threading.Tasks.Task<bool> isTakeMedicationIDAsync(int takeMedicationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPharmaceuticalManufacturing", ReplyAction="http://tempuri.org/IService1/GetAllPharmaceuticalManufacturingResponse")]
        WCFClinic.vwPharmaceuticalManufacturing[] GetAllPharmaceuticalManufacturing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPharmaceuticalManufacturing", ReplyAction="http://tempuri.org/IService1/GetAllPharmaceuticalManufacturingResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwPharmaceuticalManufacturing[]> GetAllPharmaceuticalManufacturingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPharmaceuticalManufacturing", ReplyAction="http://tempuri.org/IService1/AddPharmaceuticalManufacturingResponse")]
        WCFClinic.vwPharmaceuticalManufacturing AddPharmaceuticalManufacturing(WCFClinic.vwPharmaceuticalManufacturing pharmaceuticalManufacturing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPharmaceuticalManufacturing", ReplyAction="http://tempuri.org/IService1/AddPharmaceuticalManufacturingResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwPharmaceuticalManufacturing> AddPharmaceuticalManufacturingAsync(WCFClinic.vwPharmaceuticalManufacturing pharmaceuticalManufacturing);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePharmaceuticalManufacturing", ReplyAction="http://tempuri.org/IService1/DeletePharmaceuticalManufacturingResponse")]
        void DeletePharmaceuticalManufacturing(int manufacturerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePharmaceuticalManufacturing", ReplyAction="http://tempuri.org/IService1/DeletePharmaceuticalManufacturingResponse")]
        System.Threading.Tasks.Task DeletePharmaceuticalManufacturingAsync(int manufacturerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPharmaceuticalManufacturingDetail", ReplyAction="http://tempuri.org/IService1/GetPharmaceuticalManufacturingDetailResponse")]
        WCFClinic.vwPharmaceuticalManufacturing[] GetPharmaceuticalManufacturingDetail(int manufacturerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPharmaceuticalManufacturingDetail", ReplyAction="http://tempuri.org/IService1/GetPharmaceuticalManufacturingDetailResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwPharmaceuticalManufacturing[]> GetPharmaceuticalManufacturingDetailAsync(int manufacturerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isManufacturerID", ReplyAction="http://tempuri.org/IService1/isManufacturerIDResponse")]
        bool isManufacturerID(int manufacurerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isManufacturerID", ReplyAction="http://tempuri.org/IService1/isManufacturerIDResponse")]
        System.Threading.Tasks.Task<bool> isManufacturerIDAsync(int manufacurerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLoginsCurrent", ReplyAction="http://tempuri.org/IService1/GetAllLoginsCurrentResponse")]
        WCFClinic.vwLoginCurrent[] GetAllLoginsCurrent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllLoginsCurrent", ReplyAction="http://tempuri.org/IService1/GetAllLoginsCurrentResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwLoginCurrent[]> GetAllLoginsCurrentAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLoginCurrent", ReplyAction="http://tempuri.org/IService1/AddLoginCurrentResponse")]
        WCFClinic.vwLoginCurrent AddLoginCurrent(WCFClinic.vwLoginCurrent loginCurrent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLoginCurrent", ReplyAction="http://tempuri.org/IService1/AddLoginCurrentResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwLoginCurrent> AddLoginCurrentAsync(WCFClinic.vwLoginCurrent loginCurrent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLoginCurrent", ReplyAction="http://tempuri.org/IService1/DeleteLoginCurrentResponse")]
        void DeleteLoginCurrent(int loginCurrentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLoginCurrent", ReplyAction="http://tempuri.org/IService1/DeleteLoginCurrentResponse")]
        System.Threading.Tasks.Task DeleteLoginCurrentAsync(int loginCurrentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLoginsCurrentDetail", ReplyAction="http://tempuri.org/IService1/GetLoginsCurrentDetailResponse")]
        WCFClinic.vwLoginCurrent[] GetLoginsCurrentDetail(int loginCurrentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLoginsCurrentDetail", ReplyAction="http://tempuri.org/IService1/GetLoginsCurrentDetailResponse")]
        System.Threading.Tasks.Task<WCFClinic.vwLoginCurrent[]> GetLoginsCurrentDetailAsync(int loginCurrentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isLoginCurrentID", ReplyAction="http://tempuri.org/IService1/isLoginCurrentIDResponse")]
        bool isLoginCurrentID(int loginCurrentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isLoginCurrentID", ReplyAction="http://tempuri.org/IService1/isLoginCurrentIDResponse")]
        System.Threading.Tasks.Task<bool> isLoginCurrentIDAsync(int loginCurrentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/maxCurrentPatientID", ReplyAction="http://tempuri.org/IService1/maxCurrentPatientIDResponse")]
        int maxCurrentPatientID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/maxCurrentPatientID", ReplyAction="http://tempuri.org/IService1/maxCurrentPatientIDResponse")]
        System.Threading.Tasks.Task<int> maxCurrentPatientIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/maxCurrentMedicalStaffID", ReplyAction="http://tempuri.org/IService1/maxCurrentMedicalStaffIDResponse")]
        int maxCurrentMedicalStaffID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/maxCurrentMedicalStaffID", ReplyAction="http://tempuri.org/IService1/maxCurrentMedicalStaffIDResponse")]
        System.Threading.Tasks.Task<int> maxCurrentMedicalStaffIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        WCFClinic.CompositeType GetDataUsingDataContract(WCFClinic.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WCFClinic.CompositeType> GetDataUsingDataContractAsync(WCFClinic.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WPFClinic.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WPFClinic.ServiceReference1.IService1>, WPFClinic.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WCFClinic.vwMedicalDepartments[] GetAllMedicalDepartments() {
            return base.Channel.GetAllMedicalDepartments();
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwMedicalDepartments[]> GetAllMedicalDepartmentsAsync() {
            return base.Channel.GetAllMedicalDepartmentsAsync();
        }
        
        public WCFClinic.vwMedicalDepartments AddMedicalDepartments(WCFClinic.vwMedicalDepartments medicalDepartment) {
            return base.Channel.AddMedicalDepartments(medicalDepartment);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwMedicalDepartments> AddMedicalDepartmentsAsync(WCFClinic.vwMedicalDepartments medicalDepartment) {
            return base.Channel.AddMedicalDepartmentsAsync(medicalDepartment);
        }
        
        public void DeleteMedicalDepartment(int medicalDepartmentID) {
            base.Channel.DeleteMedicalDepartment(medicalDepartmentID);
        }
        
        public System.Threading.Tasks.Task DeleteMedicalDepartmentAsync(int medicalDepartmentID) {
            return base.Channel.DeleteMedicalDepartmentAsync(medicalDepartmentID);
        }
        
        public WCFClinic.vwMedicalDepartments[] GetMedicalDepartmentsDetail(int medicalDepartmentID) {
            return base.Channel.GetMedicalDepartmentsDetail(medicalDepartmentID);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwMedicalDepartments[]> GetMedicalDepartmentsDetailAsync(int medicalDepartmentID) {
            return base.Channel.GetMedicalDepartmentsDetailAsync(medicalDepartmentID);
        }
        
        public bool isMedicalDepartmentID(int medicalDepartmentID) {
            return base.Channel.isMedicalDepartmentID(medicalDepartmentID);
        }
        
        public System.Threading.Tasks.Task<bool> isMedicalDepartmentIDAsync(int medicalDepartmentID) {
            return base.Channel.isMedicalDepartmentIDAsync(medicalDepartmentID);
        }
        
        public WCFClinic.vwMedicalStaff[] GetAllMedicalStaff() {
            return base.Channel.GetAllMedicalStaff();
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwMedicalStaff[]> GetAllMedicalStaffAsync() {
            return base.Channel.GetAllMedicalStaffAsync();
        }
        
        public WCFClinic.vwMedicalStaff AddMedicalStaff(WCFClinic.vwMedicalStaff medicalStaff) {
            return base.Channel.AddMedicalStaff(medicalStaff);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwMedicalStaff> AddMedicalStaffAsync(WCFClinic.vwMedicalStaff medicalStaff) {
            return base.Channel.AddMedicalStaffAsync(medicalStaff);
        }
        
        public void DeleteMedicalStaff(int medicalStaffID) {
            base.Channel.DeleteMedicalStaff(medicalStaffID);
        }
        
        public System.Threading.Tasks.Task DeleteMedicalStaffAsync(int medicalStaffID) {
            return base.Channel.DeleteMedicalStaffAsync(medicalStaffID);
        }
        
        public WCFClinic.vwMedicalStaff[] GetMedicalStaffsDetail(int medicalStaffID) {
            return base.Channel.GetMedicalStaffsDetail(medicalStaffID);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwMedicalStaff[]> GetMedicalStaffsDetailAsync(int medicalStaffID) {
            return base.Channel.GetMedicalStaffsDetailAsync(medicalStaffID);
        }
        
        public bool isMedicalStaffID(int medicalStaffID) {
            return base.Channel.isMedicalStaffID(medicalStaffID);
        }
        
        public System.Threading.Tasks.Task<bool> isMedicalStaffIDAsync(int medicalStaffID) {
            return base.Channel.isMedicalStaffIDAsync(medicalStaffID);
        }
        
        public WCFClinic.vwPatients[] GetAllPatients() {
            return base.Channel.GetAllPatients();
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwPatients[]> GetAllPatientsAsync() {
            return base.Channel.GetAllPatientsAsync();
        }
        
        public WCFClinic.vwPatients AddPatient(WCFClinic.vwPatients patient) {
            return base.Channel.AddPatient(patient);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwPatients> AddPatientAsync(WCFClinic.vwPatients patient) {
            return base.Channel.AddPatientAsync(patient);
        }
        
        public void DeletePatient(int patientID) {
            base.Channel.DeletePatient(patientID);
        }
        
        public System.Threading.Tasks.Task DeletePatientAsync(int patientID) {
            return base.Channel.DeletePatientAsync(patientID);
        }
        
        public WCFClinic.vwPatients[] GetPatientsDetail(int patientID) {
            return base.Channel.GetPatientsDetail(patientID);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwPatients[]> GetPatientsDetailAsync(int patientID) {
            return base.Channel.GetPatientsDetailAsync(patientID);
        }
        
        public bool isPatientID(int patientID) {
            return base.Channel.isPatientID(patientID);
        }
        
        public System.Threading.Tasks.Task<bool> isPatientIDAsync(int patientID) {
            return base.Channel.isPatientIDAsync(patientID);
        }
        
        public WCFClinic.vwDoctorAppointment[] GetAllDoctorAppointment() {
            return base.Channel.GetAllDoctorAppointment();
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwDoctorAppointment[]> GetAllDoctorAppointmentAsync() {
            return base.Channel.GetAllDoctorAppointmentAsync();
        }
        
        public WCFClinic.vwDoctorAppointment AddDoctorAppointment(WCFClinic.vwDoctorAppointment appointment) {
            return base.Channel.AddDoctorAppointment(appointment);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwDoctorAppointment> AddDoctorAppointmentAsync(WCFClinic.vwDoctorAppointment appointment) {
            return base.Channel.AddDoctorAppointmentAsync(appointment);
        }
        
        public void DeleteDoctorAppointment(int doctorAppointmentID) {
            base.Channel.DeleteDoctorAppointment(doctorAppointmentID);
        }
        
        public System.Threading.Tasks.Task DeleteDoctorAppointmentAsync(int doctorAppointmentID) {
            return base.Channel.DeleteDoctorAppointmentAsync(doctorAppointmentID);
        }
        
        public WCFClinic.vwDoctorAppointment[] GetDoctorAppointmentsDetail(int doctorAppointmentID) {
            return base.Channel.GetDoctorAppointmentsDetail(doctorAppointmentID);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwDoctorAppointment[]> GetDoctorAppointmentsDetailAsync(int doctorAppointmentID) {
            return base.Channel.GetDoctorAppointmentsDetailAsync(doctorAppointmentID);
        }
        
        public bool isDoctorAppointmentID(int doctorAppointmentID) {
            return base.Channel.isDoctorAppointmentID(doctorAppointmentID);
        }
        
        public System.Threading.Tasks.Task<bool> isDoctorAppointmentIDAsync(int doctorAppointmentID) {
            return base.Channel.isDoctorAppointmentIDAsync(doctorAppointmentID);
        }
        
        public WCFClinic.vwLogin[] GetAllLogins() {
            return base.Channel.GetAllLogins();
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwLogin[]> GetAllLoginsAsync() {
            return base.Channel.GetAllLoginsAsync();
        }
        
        public WCFClinic.vwLogin AddLogin(WCFClinic.vwLogin login) {
            return base.Channel.AddLogin(login);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwLogin> AddLoginAsync(WCFClinic.vwLogin login) {
            return base.Channel.AddLoginAsync(login);
        }
        
        public void DeleteLogin(int loginID) {
            base.Channel.DeleteLogin(loginID);
        }
        
        public System.Threading.Tasks.Task DeleteLoginAsync(int loginID) {
            return base.Channel.DeleteLoginAsync(loginID);
        }
        
        public WCFClinic.vwLogin[] GetLoginsDetail(int loginID) {
            return base.Channel.GetLoginsDetail(loginID);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwLogin[]> GetLoginsDetailAsync(int loginID) {
            return base.Channel.GetLoginsDetailAsync(loginID);
        }
        
        public bool isLoginID(int loginID) {
            return base.Channel.isLoginID(loginID);
        }
        
        public System.Threading.Tasks.Task<bool> isLoginIDAsync(int loginID) {
            return base.Channel.isLoginIDAsync(loginID);
        }
        
        public bool LoginUserManagement(string userName, string password) {
            return base.Channel.LoginUserManagement(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserManagementAsync(string userName, string password) {
            return base.Channel.LoginUserManagementAsync(userName, password);
        }
        
        public bool LoginUserPatient(string userName, string password) {
            return base.Channel.LoginUserPatient(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserPatientAsync(string userName, string password) {
            return base.Channel.LoginUserPatientAsync(userName, password);
        }
        
        public bool LoginUserMedicalStaff(string userName, string password) {
            return base.Channel.LoginUserMedicalStaff(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserMedicalStaffAsync(string userName, string password) {
            return base.Channel.LoginUserMedicalStaffAsync(userName, password);
        }
        
        public int maxPatientID() {
            return base.Channel.maxPatientID();
        }
        
        public System.Threading.Tasks.Task<int> maxPatientIDAsync() {
            return base.Channel.maxPatientIDAsync();
        }
        
        public int maxMedicalStaffID() {
            return base.Channel.maxMedicalStaffID();
        }
        
        public System.Threading.Tasks.Task<int> maxMedicalStaffIDAsync() {
            return base.Channel.maxMedicalStaffIDAsync();
        }
        
        public int currentPatientID(string username, string password) {
            return base.Channel.currentPatientID(username, password);
        }
        
        public System.Threading.Tasks.Task<int> currentPatientIDAsync(string username, string password) {
            return base.Channel.currentPatientIDAsync(username, password);
        }
        
        public int currentMedicalStaffID(string username, string password) {
            return base.Channel.currentMedicalStaffID(username, password);
        }
        
        public System.Threading.Tasks.Task<int> currentMedicalStaffIDAsync(string username, string password) {
            return base.Channel.currentMedicalStaffIDAsync(username, password);
        }
        
        public WCFClinic.vwPharmacy[] GetAllPharmacy() {
            return base.Channel.GetAllPharmacy();
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwPharmacy[]> GetAllPharmacyAsync() {
            return base.Channel.GetAllPharmacyAsync();
        }
        
        public WCFClinic.vwPharmacy AddPharmacy(WCFClinic.vwPharmacy pharmacy) {
            return base.Channel.AddPharmacy(pharmacy);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwPharmacy> AddPharmacyAsync(WCFClinic.vwPharmacy pharmacy) {
            return base.Channel.AddPharmacyAsync(pharmacy);
        }
        
        public void DeletePharmacy(int pharmacyID) {
            base.Channel.DeletePharmacy(pharmacyID);
        }
        
        public System.Threading.Tasks.Task DeletePharmacyAsync(int pharmacyID) {
            return base.Channel.DeletePharmacyAsync(pharmacyID);
        }
        
        public WCFClinic.vwPharmacy[] GetPharmacyDetail(int pharmacyID) {
            return base.Channel.GetPharmacyDetail(pharmacyID);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwPharmacy[]> GetPharmacyDetailAsync(int pharmacyID) {
            return base.Channel.GetPharmacyDetailAsync(pharmacyID);
        }
        
        public bool isPharmacyID(int pharmacyID) {
            return base.Channel.isPharmacyID(pharmacyID);
        }
        
        public System.Threading.Tasks.Task<bool> isPharmacyIDAsync(int pharmacyID) {
            return base.Channel.isPharmacyIDAsync(pharmacyID);
        }
        
        public WCFClinic.vwTakeMedication[] GetAllTakeMedication() {
            return base.Channel.GetAllTakeMedication();
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwTakeMedication[]> GetAllTakeMedicationAsync() {
            return base.Channel.GetAllTakeMedicationAsync();
        }
        
        public WCFClinic.vwTakeMedication AddTakeMedication(WCFClinic.vwTakeMedication takeMedication) {
            return base.Channel.AddTakeMedication(takeMedication);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwTakeMedication> AddTakeMedicationAsync(WCFClinic.vwTakeMedication takeMedication) {
            return base.Channel.AddTakeMedicationAsync(takeMedication);
        }
        
        public void DeleteTakeMedication(int takeMedicationID) {
            base.Channel.DeleteTakeMedication(takeMedicationID);
        }
        
        public System.Threading.Tasks.Task DeleteTakeMedicationAsync(int takeMedicationID) {
            return base.Channel.DeleteTakeMedicationAsync(takeMedicationID);
        }
        
        public WCFClinic.vwTakeMedication[] GetTakeMedicationDetail(int takeMedicationID) {
            return base.Channel.GetTakeMedicationDetail(takeMedicationID);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwTakeMedication[]> GetTakeMedicationDetailAsync(int takeMedicationID) {
            return base.Channel.GetTakeMedicationDetailAsync(takeMedicationID);
        }
        
        public bool isTakeMedicationID(int takeMedicationID) {
            return base.Channel.isTakeMedicationID(takeMedicationID);
        }
        
        public System.Threading.Tasks.Task<bool> isTakeMedicationIDAsync(int takeMedicationID) {
            return base.Channel.isTakeMedicationIDAsync(takeMedicationID);
        }
        
        public WCFClinic.vwPharmaceuticalManufacturing[] GetAllPharmaceuticalManufacturing() {
            return base.Channel.GetAllPharmaceuticalManufacturing();
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwPharmaceuticalManufacturing[]> GetAllPharmaceuticalManufacturingAsync() {
            return base.Channel.GetAllPharmaceuticalManufacturingAsync();
        }
        
        public WCFClinic.vwPharmaceuticalManufacturing AddPharmaceuticalManufacturing(WCFClinic.vwPharmaceuticalManufacturing pharmaceuticalManufacturing) {
            return base.Channel.AddPharmaceuticalManufacturing(pharmaceuticalManufacturing);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwPharmaceuticalManufacturing> AddPharmaceuticalManufacturingAsync(WCFClinic.vwPharmaceuticalManufacturing pharmaceuticalManufacturing) {
            return base.Channel.AddPharmaceuticalManufacturingAsync(pharmaceuticalManufacturing);
        }
        
        public void DeletePharmaceuticalManufacturing(int manufacturerID) {
            base.Channel.DeletePharmaceuticalManufacturing(manufacturerID);
        }
        
        public System.Threading.Tasks.Task DeletePharmaceuticalManufacturingAsync(int manufacturerID) {
            return base.Channel.DeletePharmaceuticalManufacturingAsync(manufacturerID);
        }
        
        public WCFClinic.vwPharmaceuticalManufacturing[] GetPharmaceuticalManufacturingDetail(int manufacturerID) {
            return base.Channel.GetPharmaceuticalManufacturingDetail(manufacturerID);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwPharmaceuticalManufacturing[]> GetPharmaceuticalManufacturingDetailAsync(int manufacturerID) {
            return base.Channel.GetPharmaceuticalManufacturingDetailAsync(manufacturerID);
        }
        
        public bool isManufacturerID(int manufacurerID) {
            return base.Channel.isManufacturerID(manufacurerID);
        }
        
        public System.Threading.Tasks.Task<bool> isManufacturerIDAsync(int manufacurerID) {
            return base.Channel.isManufacturerIDAsync(manufacurerID);
        }
        
        public WCFClinic.vwLoginCurrent[] GetAllLoginsCurrent() {
            return base.Channel.GetAllLoginsCurrent();
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwLoginCurrent[]> GetAllLoginsCurrentAsync() {
            return base.Channel.GetAllLoginsCurrentAsync();
        }
        
        public WCFClinic.vwLoginCurrent AddLoginCurrent(WCFClinic.vwLoginCurrent loginCurrent) {
            return base.Channel.AddLoginCurrent(loginCurrent);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwLoginCurrent> AddLoginCurrentAsync(WCFClinic.vwLoginCurrent loginCurrent) {
            return base.Channel.AddLoginCurrentAsync(loginCurrent);
        }
        
        public void DeleteLoginCurrent(int loginCurrentID) {
            base.Channel.DeleteLoginCurrent(loginCurrentID);
        }
        
        public System.Threading.Tasks.Task DeleteLoginCurrentAsync(int loginCurrentID) {
            return base.Channel.DeleteLoginCurrentAsync(loginCurrentID);
        }
        
        public WCFClinic.vwLoginCurrent[] GetLoginsCurrentDetail(int loginCurrentID) {
            return base.Channel.GetLoginsCurrentDetail(loginCurrentID);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.vwLoginCurrent[]> GetLoginsCurrentDetailAsync(int loginCurrentID) {
            return base.Channel.GetLoginsCurrentDetailAsync(loginCurrentID);
        }
        
        public bool isLoginCurrentID(int loginCurrentID) {
            return base.Channel.isLoginCurrentID(loginCurrentID);
        }
        
        public System.Threading.Tasks.Task<bool> isLoginCurrentIDAsync(int loginCurrentID) {
            return base.Channel.isLoginCurrentIDAsync(loginCurrentID);
        }
        
        public int maxCurrentPatientID() {
            return base.Channel.maxCurrentPatientID();
        }
        
        public System.Threading.Tasks.Task<int> maxCurrentPatientIDAsync() {
            return base.Channel.maxCurrentPatientIDAsync();
        }
        
        public int maxCurrentMedicalStaffID() {
            return base.Channel.maxCurrentMedicalStaffID();
        }
        
        public System.Threading.Tasks.Task<int> maxCurrentMedicalStaffIDAsync() {
            return base.Channel.maxCurrentMedicalStaffIDAsync();
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WCFClinic.CompositeType GetDataUsingDataContract(WCFClinic.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WCFClinic.CompositeType> GetDataUsingDataContractAsync(WCFClinic.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
